[{"C:\\Users\\User\\Documents\\React\\addressbook\\src\\index.js":"1","C:\\Users\\User\\Documents\\React\\addressbook\\src\\reportWebVitals.js":"2","C:\\Users\\User\\Documents\\React\\addressbook\\src\\App.js":"3","C:\\Users\\User\\Documents\\React\\addressbook\\src\\components\\address-book-home\\address-book-home.jsx":"4","C:\\Users\\User\\Documents\\React\\addressbook\\src\\components\\address-book-form\\address-book-form.jsx":"5","C:\\Users\\User\\Documents\\React\\addressbook\\src\\services\\address-book-service.js":"6","C:\\Users\\User\\Documents\\React\\addressbook\\src\\config\\config.js":"7","C:\\Users\\User\\Documents\\React\\addressbook\\src\\services\\axios-service.js":"8","C:\\Users\\User\\Documents\\React\\addressbook\\src\\components\\address-book-display\\display.jsx":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":816,"mtime":1625719255724,"results":"13","hashOfConfig":"11"},{"size":2048,"mtime":1625724163265,"results":"14","hashOfConfig":"11"},{"size":15491,"mtime":1625719588900,"results":"15","hashOfConfig":"11"},{"size":687,"mtime":1625719949896,"results":"16","hashOfConfig":"11"},{"size":123,"mtime":1625719834563,"results":"17","hashOfConfig":"11"},{"size":748,"mtime":1625719976437,"results":"18","hashOfConfig":"11"},{"size":1857,"mtime":1625719456054,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1kdndte",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\User\\Documents\\React\\addressbook\\src\\index.js",[],["40","41"],"C:\\Users\\User\\Documents\\React\\addressbook\\src\\reportWebVitals.js",[],"C:\\Users\\User\\Documents\\React\\addressbook\\src\\App.js",[],"C:\\Users\\User\\Documents\\React\\addressbook\\src\\components\\address-book-home\\address-book-home.jsx",[],"C:\\Users\\User\\Documents\\React\\addressbook\\src\\components\\address-book-form\\address-book-form.jsx",["42","43"],"import React from 'react';\r\nimport './address-book-form.scss';\r\nimport logo from '../../assets/images/logo.png';\r\nimport cross from '../../assets/images/cross.png'\r\nimport {Link, withRouter} from 'react-router-dom';\r\nimport AddressBookService from '../../services/address-book-service'; \r\n\r\nconst initialState = {\r\n  fullName: '',\r\n  address: '',  \r\n  city: [],\r\n  state : [\r\n    { name: \"Andhra Pradesh\", city: [\"Amravati\", \"Chittoor\", \"Elluru\", \"Guntur\", \"Kadapa\", \"Kakinada\", \"Rajahmundry\", \"Vijayawada\", \"Visakhapatnam\"]},\r\n    { name: \"Bihar\", city: [\"Arrah\", \"Begusarai\", \"Bhagalpur\", \"Chhapra\", \"Darbhanga\", \"Gaya\", \"Muzaffarnagar\", \"Patna\"]},\r\n    { name:  \"Madhya Pradesh\", city: [\"Bhopal\", \"Chitrakoot\", \"Indore\", \"Gwalior\", \"Jabalpur\", \"Satna\", \"Ujjain\"]},\r\n    { name: \"Gujarat\", city: [\"Ahmedabad\", \"Dwarka\", \"Gandhinagar\", \"Porbandar\", \"Rajkot\", \"Surat\", \"Vadodara\"]},\r\n    { name: \"Maharashtra\", city: [\"Ahmednagar\", \"Aurangabad\", \"Kolhapur\", \"Mumbai\", \"Nagpur\", \"Nashik\", \"Pune\", \"Thane\"]},\r\n    { name: \"Uttar Pradesh\", city: [\"Agra\", \"Aligarh\", \"Allahabad\", \"Bareilly\", \"Fatehpur\", \"Ghaziabad\", \"Hathras\", \"Kanpur\", \"Lucknow\", \"Noida\", \"Varanasi\"]},\r\n  ],\r\n  zip: '',\r\n  selectedState : '',\r\n  selectedCity: '',\r\n  phoneNumber: '',\r\n\r\n  id: '',      \r\n  isUpdate: false,\r\n  isError: false,\r\n\r\n  error: {\r\n    fullName: '',\r\n    address: '',\r\n    selectedCity: '',\r\n    selectedState: '',\r\n    zip: '',\r\n    phoneNumber: ''\r\n  },  \r\n  valid: {\r\n    fullName: '',\r\n    address: '',\r\n    selectedCity: '',\r\n    selectedState: '',\r\n    zip: '',\r\n    phoneNumber: ''\r\n  }\r\n}\r\nclass AddressBookForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      fullName: '',\r\n      address: '',\r\n      state : [\r\n        \t\t{ name: \"Andhra Pradesh\", city: [\"Amravati\", \"Chittoor\", \"Elluru\", \"Guntur\", \"Kadapa\", \"Kakinada\", \"Rajahmundry\", \"Vijayawada\", \"Visakhapatnam\"]},\r\n        \t\t{ name: \"Bihar\", city: [\"Arrah\", \"Begusarai\", \"Bhagalpur\", \"Chhapra\", \"Darbhanga\", \"Gaya\", \"Muzaffarnagar\", \"Patna\"]},\r\n        \t\t{ name:  \"Madhya Pradesh\", city: [\"Bhopal\", \"Chitrakoot\", \"Indore\", \"Gwalior\", \"Jabalpur\", \"Satna\", \"Ujjain\"]},\r\n        \t\t{ name: \"Gujarat\", city: [\"Ahmedabad\", \"Dwarka\", \"Gandhinagar\", \"Porbandar\", \"Rajkot\", \"Surat\", \"Vadodara\"]},\r\n            { name: \"Maharashtra\", city: [\"Ahmednagar\", \"Aurangabad\", \"Kolhapur\", \"Mumbai\", \"Nagpur\", \"Nashik\", \"Pune\", \"Thane\"]},\r\n            { name: \"Uttar Pradesh\", city: [\"Agra\", \"Aligarh\", \"Allahabad\", \"Bareilly\", \"Fatehpur\", \"Ghaziabad\", \"Hathras\", \"Kanpur\", \"Lucknow\", \"Noida\", \"Varanasi\"]},\r\n        \t],\r\n\t\t\tcity : [],\r\n      selectedState : '',\r\n      selectedCity: '',\r\n      zip: '',\r\n      phoneNumber: '',\r\n\r\n      id: '',      \r\n      isUpdate: false,\r\n      isError: false,\r\n\r\n      error: {\r\n        fullName: '',\r\n        address: '',\r\n        selectedCity: '',\r\n        selectedState: '',\r\n        zip: '',\r\n        phoneNumber: ''\r\n      },  \r\n      valid: {\r\n        fullName: '',\r\n        address: '',\r\n        selectedCity: '',\r\n        selectedState: '',\r\n        zip: '',\r\n        phoneNumber: ''\r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    let id = this.props.match.params.id;\r\n    if(id !== undefined && id!=='') {\r\n      this.getContactById(id);\r\n    }\r\n  }\r\n\r\n  getContactById = (id) => {\r\n    new AddressBookService().getContactById(id)\r\n    .then(responseDTO => {\r\n      let responseText = responseDTO.data;\r\n      this.setContactData(responseText.data);\r\n    }).catch(error => {\r\n      alert(\"Error while fetching contact data by ID :\\n\" + JSON.stringify(error));\r\n    })\r\n  }\r\n  setContactData = (contact) => {\r\n    this.setState({\r\n      id: contact.id,\r\n      fullName: contact.fullName,\r\n      address: contact.address,\r\n      selectedCity: contact.city,\r\n      selectedState: contact.state,\r\n      zip: contact.zip,\r\n      phoneNumber: contact.phoneNumber,\r\n      isUpdate: true,\r\n      city : this.state.state.find(stat => stat.name === contact.state).city\r\n    });\r\n  }\r\n\r\n  nameChangeHandler = (event) => {\r\n    this.setState({fullName: event.target.value});\r\n    this.checkName(event.target.value);\r\n  }\r\n  phoneNumberChangeHandler = (event) => {\r\n    this.setState({phoneNumber: event.target.value});\r\n    this.checkPhoneNumber(event.target.value);\r\n  }\r\n  addressChangeHandler = (event) => {\r\n    this.setState({address: event.target.value});\r\n    this.checkAddress(event.target.value);\r\n  }\r\n  cityChangeHandler = (event) => {\r\n    this.setState({selectedCity: event.target.value})\r\n    this.checkSelect('city', event.target.value);\r\n  }\r\n  stateChangeHandler = (event) => {\r\n    this.setState({selectedState: event.target.value});\r\n    this.setState({city : this.state.state.find(stat => stat.name === event.target.value).city});\r\n    this.checkSelect('state', event.target.value);\r\n  }\r\n  zipChangeHandler = (event) => {\r\n    this.setState({zip: event.target.value});\r\n    this.checkZip(event.target.value);\r\n  }\r\n\r\n  initializeMessage = (field, errorMessage, validMessage) => {\r\n    this.setState(previousState => ({\r\n      error: {\r\n        ...previousState.error,\r\n        [field]: errorMessage\r\n      }\r\n    }));\r\n    this.setState(previousState => ({\r\n      valid: {\r\n        ...previousState.valid,\r\n        [field]: validMessage\r\n      }\r\n    }));\r\n  }\r\n  checkName = (nameValue) => {\r\n    if(nameValue.length === 0) {\r\n      this.initializeMessage('fullName', '', '');\r\n    } else {\r\n      const NAME_REGEX = RegExp(\"^[A-Z]{1}[a-z]{2,}[ ][A-Z]{1}[a-z]{2,}$\");\r\n      if(NAME_REGEX.test(nameValue)) {\r\n        this.initializeMessage('fullName', '', '✓');\r\n      } else {\r\n        this.initializeMessage('fullName', 'Full Name is Invalid!', '');\r\n      }\r\n    }\r\n  }\r\n  checkPhoneNumber = (phoneNumberValue) => {\r\n    if(phoneNumberValue.length === 0) {\r\n      this.initializeMessage('phoneNumber', 'Phone Number is a Required Field!', '');\r\n    } else {\r\n      const PHONE_NUMBER_REGEX = RegExp(\"((^\\\\+?)(([0-9]{2,3})(\\\\s))?)[1-9]{1}[0-9]{9}$\");\r\n      if(PHONE_NUMBER_REGEX.test(phoneNumberValue)) {\r\n        this.initializeMessage('phoneNumber', '', '✓');\r\n      } else {\r\n        this.initializeMessage('phoneNumber', 'Phone Number is Invalid!', '');\r\n      }\r\n    }\r\n  }\r\n  checkAddress = (addressValue) => {\r\n    if(addressValue.length === 0) {\r\n      this.initializeMessage('address', 'Address is a Required Field!', '');\r\n    } else {\r\n      const PHONE_NUMBER_REGEX = RegExp(\"^[A-Za-z0-9-,\\\\.]{3,}([\\\\s][A-Za-z0-9-,\\\\.]{3,}){0,}$\");\r\n      if(PHONE_NUMBER_REGEX.test(addressValue)) {\r\n        this.initializeMessage('address', '', '✓');\r\n      } else {\r\n        this.initializeMessage('address', 'Address is Invalid!', '');\r\n      }\r\n    }\r\n  }\r\n  checkSelect = (field, fieldValue) => {\r\n    if(fieldValue.length === 0) {\r\n      this.initializeMessage(field, '✖', '');\r\n    } else {\r\n      this.initializeMessage(field, '', '✓');\r\n    }    \r\n  }\r\n  checkZip = (zipValue) => {\r\n    if(zipValue.length === 0) {\r\n      this.initializeMessage('zip', '✖', '');\r\n    } else {\r\n      const ZIP_CODE_REGEX = RegExp(\"^[1-9]{1}[0-9]{5}$\");\r\n      if(ZIP_CODE_REGEX.test(zipValue)) {\r\n        this.initializeMessage('zip', '', '✓');\r\n      } else {\r\n        this.initializeMessage('zip', '✖', '');\r\n      }\r\n    }\r\n  }\r\n\r\n  checkGlobalError = () =>{\r\n    if(this.state.error.fullName.length === 0 && this.state.error.address.length === 0 && this.state.error.selectedCity.length === 0 \r\n      && this.state.error.selectedState.length === 0 && this.state.error.zip.length === 0 && this.state.error.phoneNumber.length === 0) {\r\n        this.setState({isError: false});\r\n      } else {\r\n        this.setState({isError: true});\r\n      }\r\n  }\r\n\r\n  checkValidations = async () => {\r\n     this.checkName(this.state.fullName);\r\n     this.checkAddress(this.state.address);\r\n     this.checkSelect('city',this.state.city);\r\n     this.checkSelect('state',this.state.state);\r\n     this.checkZip(this.state.zip);\r\n     this.checkPhoneNumber(this.state.phoneNumber);\r\n     this.checkGlobalError();\r\n    return (this.state.isError);\r\n  }\r\n  save = async (event) => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    \r\n    saveOperation: {         \r\n      if(await this.checkValidations()) {\r\n        let errorLog = JSON.stringify(this.state.error);\r\n        alert(\"Error Occured while Submitting the Form ==> ERROR LOG : \" + errorLog);\r\n        break saveOperation;\r\n      }    \r\n      let contactObject = {\r\n        id: this.state.id,\r\n        fullName: this.state.fullName,\r\n        address: this.state.address,\r\n        city: this.state.selectedCity,\r\n        state: this.state.selectedState,\r\n        zip: this.state.zip,\r\n        phoneNumber: this.state.phoneNumber\r\n      }\r\n      if(this.state.isUpdate) {\r\n        new AddressBookService().updateContact(contactObject)\r\n        .then(responseText => {\r\n          alert(\"Contact Updated Successfully!!!\\n\" + JSON.stringify(responseText.data));\r\n          this.props.history.push(\"/home\");\r\n        }).catch(error => {\r\n          alert(\"Error while updating Contact!!!\\n\" + JSON.stringify(error));\r\n        })\r\n      } else {\r\n        new AddressBookService().addContact(contactObject)\r\n        .then(responseDTO => {\r\n          let responseText = responseDTO.data;\r\n          alert(\"Contact Added Successfully!!!\\n\" + JSON.stringify(responseText.data));\r\n          this.props.history.push(\"/home\");\r\n        }).catch(error => {\r\n          alert(\"Error while adding Contact!!!\\n\" + JSON.stringify(error));\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  reset = () => {\r\n    this.setState({...initialState});\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className=\"body\">\r\n        <header className=\"headerContainer header\">\r\n            <div className=\"logoContainer\">\r\n                <img src={logo} alt=\"\" />\r\n                <div>\r\n                    <span className=\"address-text\">ADDRESS</span><br />\r\n                    <span className=\"address-text book-text\">BOOK</span>\r\n                </div>\r\n            </div>\r\n        </header>\r\n        <div className=\"form-content\">\r\n            <form className=\"form\" action=\"#\" onSubmit={this.save} onReset={this.reset}>\r\n                <div className=\"form-head\">\r\n                    <div className=\"form-text\">Person Address Form</div>\r\n                    <div>\r\n                        <Link to=''><img className=\"cancel-img\" src={cross} alt=\"\" /></Link>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row-content\">\r\n                    <label htmlFor=\"full-name\" className=\"label text\">Full Name</label>\r\n                    <div className=\"validity-check\">\r\n                        <input className=\"input\" value={this.state.fullName} onChange={this.nameChangeHandler} type=\"text\" id=\"full-name\" name=\"full-name\" required />\r\n                        <valid-message className=\"valid-full-name\" htmlFor=\"full-name\">{this.state.valid.fullName}</valid-message>\r\n                        <error-output className=\"full-name-error\" htmlFor=\"full-name\">{this.state.error.fullName}</error-output>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row-content\">\r\n                    <label htmlFor=\"tel\" className=\"label text\">Phone Number</label>\r\n                    <div className=\"validity-check\">\r\n                        <input className=\"input\" value={this.state.phoneNumber} onChange={this.phoneNumberChangeHandler} type=\"tel\" id=\"tel\" name=\"tel\" />\r\n                        <valid-message className=\"valid-tel\" htmlFor=\"tel\">{this.state.valid.phoneNumber}</valid-message>\r\n                        <error-output className=\"tel-error\" htmlFor=\"tel\">{this.state.error.phoneNumber}</error-output>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row-content\">\r\n                    <label htmlFor=\"address\" className=\"label text\">Address</label>\r\n                    <div className=\"validity-check\">\r\n                        <textarea className=\"input text\" value={this.state.address} onChange={this.addressChangeHandler} name=\"address\" id=\"address\" style={{height: \"100px\"}} ></textarea>\r\n                        <valid-message className=\"valid-address\" htmlFor=\"address\">{this.state.valid.address}</valid-message>\r\n                        <error-output className=\"address-error\" htmlFor=\"address\">{this.state.error.address}</error-output>\r\n                    </div>\r\n                </div>\r\n                <div className=\"select-elements\">\r\n                     <div name=\"select-state\" id=\"select-state\" className=\"select-div\">\r\n                        <label htmlFor=\"state\" className=\"label text\">State</label>\r\n                        <div className=\"validity-check\">\r\n                          <select name=\"state\" id=\"state\" value={this.state.selectedState} onChange={this.stateChangeHandler}>\r\n                          <option>Select State</option>\r\n\t\t\t              \t\t\t{this.state.state.map((e, key) => (\r\n\t\t\t\t\t\t                \t<option key={key}>{e.name}</option>\r\n\t\t\t\t              \t\t))}\r\n\t\t\t                \t\t</select>\r\n                          <valid-message className=\"valid-state\" htmlFor=\"state\">{this.state.valid.state}</valid-message>\r\n                          <error-output className=\"state-error\" htmlFor=\"state\">{this.state.error.state}</error-output>\r\n                        </div>\r\n                    </div>\r\n                    <div name=\"select-city\" id=\"select-city\" className=\"select-div\">\r\n                        <label htmlFor=\"city\" className=\"label text\">City</label>\r\n                        <div className=\"validity-check\">\r\n                          <select name=\"city\" id=\"city\" value={this.state.selectedCity} onChange={this.cityChangeHandler}>\r\n                          <option>Select City</option>\r\n\t\t\t\t\t              \t{this.state.city.map((e, key) => (\r\n\t\t\t\t\t              \t\t<option key={key}>{e}</option>\r\n                          ))}\r\n\t\t\t\t                \t</select>\r\n                          <valid-message className=\"valid-city\" htmlFor=\"city\">{this.state.valid.city}</valid-message>\r\n                          <error-output className=\"city-error\" htmlFor=\"city\">{this.state.error.city}</error-output>\r\n                        </div>\r\n                    </div>\r\n                    <div name=\"select-zip\" id=\"select-zip\" className=\"select-div\">\r\n                        <label htmlFor=\"zip\" className=\"label text\">Zip Code</label>\r\n                        <div className=\"validity-check\">\r\n                          <input className=\"input\" type=\"postal\" id=\"zip\"  value={this.state.zip} onChange={this.zipChangeHandler} />                          \r\n                          <valid-message className=\"valid-zip\" htmlFor=\"zip\">{this.state.valid.zip}</valid-message>\r\n                          <error-output className=\"zip-error\" htmlFor=\"zip\">{this.state.error.zip}</error-output>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"buttonParent\">\r\n                    <div className=\"submit-reset\">\r\n                        <button type=\"submit\" className=\"button submitButton\">{this.state.isUpdate ? 'Update' : 'Add'}</button>\r\n                        <button type=\"reset\" className=\"resetButton button\">Reset</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(AddressBookForm);","C:\\Users\\User\\Documents\\React\\addressbook\\src\\services\\address-book-service.js",[],"C:\\Users\\User\\Documents\\React\\addressbook\\src\\config\\config.js",[],"C:\\Users\\User\\Documents\\React\\addressbook\\src\\services\\axios-service.js",[],"C:\\Users\\User\\Documents\\React\\addressbook\\src\\components\\address-book-display\\display.jsx",[],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":238,"column":5,"nodeType":"50","messageId":"51","endLine":271,"endColumn":6},{"ruleId":"48","severity":1,"message":"52","line":242,"column":9,"nodeType":"53","messageId":"54","endLine":242,"endColumn":29},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"no-labels","Unexpected labeled statement.","LabeledStatement","unexpectedLabel","Unexpected label in break statement.","BreakStatement","unexpectedLabelInBreak","no-global-assign","no-unsafe-negation"]